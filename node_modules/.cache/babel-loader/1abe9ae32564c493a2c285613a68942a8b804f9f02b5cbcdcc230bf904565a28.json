{"ast":null,"code":"var _jsxFileName = \"/home/yodemente/proyectofinal/src/componentes/AcordeonC2.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AcordeonC2() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"accordion\",\n    id: \"accordionExample\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"accordion-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        class: \"accordion-header\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"accordion-button\",\n          type: \"button\",\n          \"data-bs-toggle\": \"collapse\",\n          \"data-bs-target\": \"#collapseOne\",\n          \"aria-expanded\": \"true\",\n          \"aria-controls\": \"collapseOne\",\n          children: \"Caracter\\xEDsticas de C++\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 6,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 5,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"collapseOne\",\n        class: \"accordion-collapse collapse show\",\n        \"data-bs-parent\": \"#accordionExample\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"accordion-body\",\n          children: \"Su sintaxis es heredada del lenguaje C. Programa orientado a objetos (POO). Permite la agrupaci\\xF3n de instrucciones. Es port\\xE1til y tiene un gran n\\xFAmero de compiladores en diferentes plataformas y sistemas operativos. Permite la separaci\\xF3n de un programa en m\\xF3dulos que admiten compilaci\\xF3n independiente. Es un lenguaje de alto nivel.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"accordion-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        class: \"accordion-header\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"accordion-button collapsed\",\n          type: \"button\",\n          \"data-bs-toggle\": \"collapse\",\n          \"data-bs-target\": \"#collapseTwo\",\n          \"aria-expanded\": \"false\",\n          \"aria-controls\": \"collapseTwo\",\n          children: \"Tama\\xF1os asociados\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"collapseTwo\",\n        class: \"accordion-collapse collapse\",\n        \"data-bs-parent\": \"#accordionExample\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"accordion-body\",\n          children: \"Seg\\xFAn la m\\xE1quina y el compilador que se utilice los tipos primitivos pueden ocupar un determinado tama\\xF1o en memoria. La siguiente lista ilustra el n\\xFAmero de bits que ocupan los distintos tipos primitivos en la arquitectura x86. Otras arquitecturas pueden requerir distintos tama\\xF1os de tipos de datos primitivos. C++ no dice nada acerca de cu\\xE1l es el n\\xFAmero de bits en un byte, ni del tama\\xF1o de estos tipos; m\\xE1s bien, ofrece solamente las siguientes \\\"garant\\xEDas de tipos\\\": De acuerdo al est\\xE1ndar C99, un tipo char debe ocupar exactamente un byte compuesto de un m\\xEDnimo de 8 bits independientemente de la arquitectura de la m\\xE1quina. El tama\\xF1o reconocido de char es de 1. Es decir, sizeof(char) siempre devuelve 1. Un tipo short tiene al menos el mismo tama\\xF1o que un tipo char. Un tipo long tiene al menos el doble tama\\xF1o en bytes que un tipo short. Un tipo int tiene un tama\\xF1o entre el de short y el de long, ambos incluidos, preferentemente el tama\\xF1o de un apuntador de memoria de la m\\xE1quina. Su valor m\\xE1ximo es 2147483647, usando 32 bits. Un tipo unsigned tiene el mismo tama\\xF1o que su versi\\xF3n signed.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"accordion-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        class: \"accordion-header\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"accordion-button collapsed\",\n          type: \"button\",\n          \"data-bs-toggle\": \"collapse\",\n          \"data-bs-target\": \"#collapseThree\",\n          \"aria-expanded\": \"false\",\n          \"aria-controls\": \"collapseThree\",\n          children: \"Principios\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"collapseThree\",\n        class: \"accordion-collapse collapse\",\n        \"data-bs-parent\": \"#accordionExample\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"accordion-body\",\n          children: \"Todo programa en C++ debe tener la funci\\xF3n principal main() (a no ser que se especifique en tiempo de compilaci\\xF3n otro punto de entrada, que en realidad es la funci\\xF3n que tiene el main()) La primera es la forma por omisi\\xF3n de un programa que no recibe par\\xE1metros ni argumentos. La segunda forma tiene dos par\\xE1metros: argc, un n\\xFAmero que describe el n\\xFAmero de argumentos del programa (incluyendo el nombre del programa mismo), y argv, un puntero a un array de punteros, de argc elementos, donde el elemento argv[i] representa el i-\\xE9simo argumento entregado al programa. En el tercer caso se a\\xF1ade la posibilidad de poder acceder a las variables de entorno de ejecuci\\xF3n de la misma forma que se accede a los argumentos del programa, pero reflejados sobre la variable env. El tipo de retorno de main es un valor entero int. Al finalizar la funci\\xF3n main, debe incluirse el valor de retorno (por ejemplo, return 0;, aunque el est\\xE1ndar prev\\xE9 solamente dos posibles valores de retorno: EXIT_SUCCESS y EXIT_FAILURE, definidas en el archivo cstdlib), o salir por medio de la funci\\xF3n exit. Alternativamente puede dejarse en blanco, en cuyo caso el compilador es responsable de agregar la salida adecuada.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 9\n  }, this);\n}\n_c = AcordeonC2;\nvar _c;\n$RefreshReg$(_c, \"AcordeonC2\");","map":{"version":3,"names":["AcordeonC2","_jsxDEV","class","id","children","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/yodemente/proyectofinal/src/componentes/AcordeonC2.jsx"],"sourcesContent":["export default function AcordeonC2() {\n    return (\n        <div class=\"accordion\" id=\"accordionExample\">\n            <div class=\"accordion-item\">\n                <h2 class=\"accordion-header\">\n                    <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                        Características de C++\n                    </button>\n                </h2>\n                <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\n                    <div class=\"accordion-body\">\n                        Su sintaxis es heredada del lenguaje C.\n                        Programa orientado a objetos (POO).\n                        Permite la agrupación de instrucciones.\n                        Es portátil y tiene un gran número de compiladores en diferentes plataformas y sistemas operativos.\n                        Permite la separación de un programa en módulos que admiten compilación independiente.\n                        Es un lenguaje de alto nivel.\n                    </div>\n                </div>\n            </div>\n            <div class=\"accordion-item\">\n                <h2 class=\"accordion-header\">\n                    <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n\n                        Tamaños asociados\n                    </button>\n                </h2>\n                <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                    <div class=\"accordion-body\">\n\n                        Según la máquina y el compilador que se utilice los tipos primitivos pueden ocupar un determinado tamaño en memoria. La siguiente lista ilustra el número de bits que ocupan los distintos tipos primitivos en la arquitectura x86.\n                        Otras arquitecturas pueden requerir distintos tamaños de tipos de datos primitivos. C++ no dice nada acerca de cuál es el número de bits en un byte, ni del tamaño de estos tipos; más bien, ofrece solamente las siguientes \"garantías de tipos\":\n\n                        De acuerdo al estándar C99, un tipo char debe ocupar exactamente un byte compuesto de un mínimo de 8 bits independientemente de la arquitectura de la máquina.\n                        El tamaño reconocido de char es de 1. Es decir, sizeof(char) siempre devuelve 1.\n                        Un tipo short tiene al menos el mismo tamaño que un tipo char.\n                        Un tipo long tiene al menos el doble tamaño en bytes que un tipo short.\n                        Un tipo int tiene un tamaño entre el de short y el de long, ambos incluidos, preferentemente el tamaño de un apuntador de memoria de la máquina. Su valor máximo es 2147483647, usando 32 bits.\n                        Un tipo unsigned tiene el mismo tamaño que su versión signed.\n                    </div>\n                </div>\n            </div>\n            <div class=\"accordion-item\">\n                <h2 class=\"accordion-header\">\n                    <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n\n                        Principios\n                    </button>\n                </h2>\n                <div id=\"collapseThree\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                    <div class=\"accordion-body\">\n                        Todo programa en C++ debe tener la función principal main() (a no ser que se especifique en tiempo de compilación otro punto de entrada, que en realidad es la función que tiene el main())\n                        La primera es la forma por omisión de un programa que no recibe parámetros ni argumentos. La segunda forma tiene dos parámetros: argc, un número que describe el número de argumentos del programa (incluyendo el nombre del programa mismo), y argv, un puntero a un array de punteros, de argc elementos, donde el elemento argv[i] representa el i-ésimo argumento entregado al programa. En el tercer caso se añade la posibilidad de poder acceder a las variables de entorno de ejecución de la misma forma que se accede a los argumentos del programa, pero reflejados sobre la variable env.\n\n                        El tipo de retorno de main es un valor entero int. Al finalizar la función main, debe incluirse el valor de retorno (por ejemplo, return 0;, aunque el estándar prevé solamente dos posibles valores de retorno: EXIT_SUCCESS y EXIT_FAILURE, definidas en el archivo cstdlib), o salir por medio de la función exit. Alternativamente puede dejarse en blanco, en cuyo caso el compilador es responsable de agregar la salida adecuada.\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}