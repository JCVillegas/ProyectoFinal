{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function AcordeonC1(){return/*#__PURE__*/_jsxs(\"div\",{class:\"accordion\",id:\"accordionExample\",children:[/*#__PURE__*/_jsxs(\"div\",{class:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{class:\"accordion-header\",children:/*#__PURE__*/_jsx(\"button\",{class:\"accordion-button\",type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseOne\",\"aria-expanded\":\"true\",\"aria-controls\":\"collapseOne\",children:\"Arquitectura de .NET\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseOne\",class:\"accordion-collapse collapse show\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsx(\"div\",{class:\"accordion-body\",children:\"Los programas de C# se ejecutan en .NET, un sistema de ejecuci\\xF3n virtual denominado Common Language Runtime (CLR) y un conjunto de bibliotecas de clases. CLR es la implementaci\\xF3n de Microsoft del est\\xE1ndar internacional Common Language Infrastructure (CLI). CLI es la base para crear entornos de ejecuci\\xF3n y desarrollo en los que los lenguajes y las bibliotecas funcionan juntos sin problemas. El c\\xF3digo fuente escrito en C# se compila en un lenguaje intermedio (IL) que guarda conformidad con la especificaci\\xF3n de CLI. El c\\xF3digo y los recursos de IL, como los mapas de bits y las cadenas, se almacenan en un ensamblado, normalmente con una extensi\\xF3n .dll. Un ensamblado contiene un manifiesto que proporciona informaci\\xF3n sobre los tipos, la versi\\xF3n y la referencia cultural. Cuando se ejecuta el programa C#, el ensamblado se carga en CLR. CLR realiza la compilaci\\xF3n Just-In-Time (JIT) para convertir el c\\xF3digo IL en instrucciones de m\\xE1quina nativas. Adem\\xE1s, CLR proporciona otros servicios relacionados con la recolecci\\xF3n de elementos no utilizados, el control de excepciones y la administraci\\xF3n de recursos. El c\\xF3digo que se ejecuta en CLR a veces se conoce como \\\"c\\xF3digo administrado\\\". El \\\"c\\xF3digo no administrado\\\" se compila en un lenguaje nativo de la m\\xE1quina destinado a un sistema concreto.\"})})]}),/*#__PURE__*/_jsxs(\"div\",{class:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{class:\"accordion-header\",children:/*#__PURE__*/_jsx(\"button\",{class:\"accordion-button collapsed\",type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseTwo\",\"aria-expanded\":\"false\",\"aria-controls\":\"collapseTwo\",children:\"Tipos y variables\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseTwo\",class:\"accordion-collapse collapse\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsx(\"div\",{class:\"accordion-body\",children:\"Un tipo define la estructura y el comportamiento de los datos en C#. La declaraci\\xF3n de un tipo puede incluir sus miembros, tipo base, interfaces que implementa y operaciones permitidas para ese tipo. Una variable es una etiqueta que hace referencia a una instancia de un tipo espec\\xEDfico. Hay dos clases de tipos en C#: tipos de valor y tipos de referencia. Las variables de tipos de valor contienen directamente sus datos. Las variables de tipos de referencia almacenan referencias a los datos, lo que se conoce como objetos. Con los tipos de referencia, es posible que dos variables hagan referencia al mismo objeto y que, por tanto, las operaciones en una variable afecten al objeto al que hace referencia la otra. Con los tipos de valor, cada variable tiene su propia copia de los datos y no es posible que las operaciones en una variable afecten a la otra (excepto para las variables de par\\xE1metro ref y out). Un identificador es un nombre de variable. Un identificador es una secuencia de caracteres Unicode sin ning\\xFAn espacio en blanco. Un identificador puede ser una palabra reservada de C# si tiene el prefijo @. El uso de una palabra reservada como identificador puede ser \\xFAtil al interactuar con otros lenguajes.\"})})]}),/*#__PURE__*/_jsxs(\"div\",{class:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{class:\"accordion-header\",children:/*#__PURE__*/_jsx(\"button\",{class:\"accordion-button collapsed\",type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseThree\",\"aria-expanded\":\"false\",\"aria-controls\":\"collapseThree\",children:\"Estructura del programa\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseThree\",class:\"accordion-collapse collapse\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsx(\"div\",{class:\"accordion-body\",children:\"Prototipos Los conceptos organizativos clave de C# son programas, espacios de nombres, tipos, miembros y ensamblados. Los programas declaran tipos, que contienen miembros y pueden organizarse en espacios de nombres. Las clases, estructuras e interfaces son ejemplos de tipos. Los campos, los m\\xE9todos, las propiedades y los eventos son ejemplos de miembros. Cuando se compilan programas de C#, se empaquetan f\\xEDsicamente en ensamblados. Normalmente, los ensamblados tienen las extensiones de archivo .exe o .dll, en funci\\xF3n de si implementan aplicaciones o bibliotecas, respectivamente.\"})})]})]});}","map":{"version":3,"names":["AcordeonC1","_jsxs","class","id","children","_jsx","type"],"sources":["/home/yodemente/proyectofinal/src/componentes/AcordeonC1.jsx"],"sourcesContent":["export default function AcordeonC1() {\n    return (\n        <div class=\"accordion\" id=\"accordionExample\">\n            <div class=\"accordion-item\">\n                <h2 class=\"accordion-header\">\n                    <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                        Arquitectura de .NET\n                    </button>\n                </h2>\n                <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\n                    <div class=\"accordion-body\">\n                        Los programas de C# se ejecutan en .NET, un sistema de ejecución virtual denominado Common Language Runtime (CLR) y un conjunto de bibliotecas de clases. CLR es la implementación de Microsoft del estándar internacional Common Language Infrastructure (CLI). CLI es la base para crear entornos de ejecución y desarrollo en los que los lenguajes y las bibliotecas funcionan juntos sin problemas.\n\n                        El código fuente escrito en C# se compila en un lenguaje intermedio (IL) que guarda conformidad con la especificación de CLI. El código y los recursos de IL, como los mapas de bits y las cadenas, se almacenan en un ensamblado, normalmente con una extensión .dll. Un ensamblado contiene un manifiesto que proporciona información sobre los tipos, la versión y la referencia cultural.\n\n                        Cuando se ejecuta el programa C#, el ensamblado se carga en CLR. CLR realiza la compilación Just-In-Time (JIT) para convertir el código IL en instrucciones de máquina nativas. Además, CLR proporciona otros servicios relacionados con la recolección de elementos no utilizados, el control de excepciones y la administración de recursos. El código que se ejecuta en CLR a veces se conoce como \"código administrado\". El \"código no administrado\" se compila en un lenguaje nativo de la máquina destinado a un sistema concreto.\n                    </div>\n                </div>\n            </div>\n            <div class=\"accordion-item\">\n                <h2 class=\"accordion-header\">\n                    <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n\n                        Tipos y variables\n                    </button>\n                </h2>\n                <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                    <div class=\"accordion-body\">\n\n                        Un tipo define la estructura y el comportamiento de los datos en C#. La declaración de un tipo puede incluir sus miembros, tipo base, interfaces que implementa y operaciones permitidas para ese tipo. Una variable es una etiqueta que hace referencia a una instancia de un tipo específico.\n\n                        Hay dos clases de tipos en C#: tipos de valor y tipos de referencia. Las variables de tipos de valor contienen directamente sus datos. Las variables de tipos de referencia almacenan referencias a los datos, lo que se conoce como objetos. Con los tipos de referencia, es posible que dos variables hagan referencia al mismo objeto y que, por tanto, las operaciones en una variable afecten al objeto al que hace referencia la otra. Con los tipos de valor, cada variable tiene su propia copia de los datos y no es posible que las operaciones en una variable afecten a la otra (excepto para las variables de parámetro ref y out).\n\n                        Un identificador es un nombre de variable. Un identificador es una secuencia de caracteres Unicode sin ningún espacio en blanco. Un identificador puede ser una palabra reservada de C# si tiene el prefijo @. El uso de una palabra reservada como identificador puede ser útil al interactuar con otros lenguajes.\n                    </div>\n                </div>\n            </div>\n            <div class=\"accordion-item\">\n                <h2 class=\"accordion-header\">\n                    <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n\n                        Estructura del programa\n                    </button>\n                </h2>\n                <div id=\"collapseThree\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                    <div class=\"accordion-body\">\n                        Prototipos\n                        Los conceptos organizativos clave de C# son programas, espacios de nombres, tipos, miembros y ensamblados. Los programas declaran tipos, que contienen miembros y pueden organizarse en espacios de nombres. Las clases, estructuras e interfaces son ejemplos de tipos. Los campos, los métodos, las propiedades y los eventos son ejemplos de miembros. Cuando se compilan programas de C#, se empaquetan físicamente en ensamblados. Normalmente, los ensamblados tienen las extensiones de archivo .exe o .dll, en función de si implementan aplicaciones o bibliotecas, respectivamente.\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"],"mappings":"wFAAA,cAAe,SAAS,CAAAA,UAAUA,CAAA,CAAG,CACjC,mBACIC,KAAA,QAAKC,KAAK,CAAC,WAAW,CAACC,EAAE,CAAC,kBAAkB,CAAAC,QAAA,eACxCH,KAAA,QAAKC,KAAK,CAAC,gBAAgB,CAAAE,QAAA,eACvBC,IAAA,OAAIH,KAAK,CAAC,kBAAkB,CAAAE,QAAA,cACxBC,IAAA,WAAQH,KAAK,CAAC,kBAAkB,CAACI,IAAI,CAAC,QAAQ,CAAC,iBAAe,UAAU,CAAC,iBAAe,cAAc,CAAC,gBAAc,MAAM,CAAC,gBAAc,aAAa,CAAAF,QAAA,CAAC,sBAExJ,CAAQ,CAAC,CACT,CAAC,cACLC,IAAA,QAAKF,EAAE,CAAC,aAAa,CAACD,KAAK,CAAC,kCAAkC,CAAC,iBAAe,mBAAmB,CAAAE,QAAA,cAC7FC,IAAA,QAAKH,KAAK,CAAC,gBAAgB,CAAAE,QAAA,CAAC,i1CAM5B,CAAK,CAAC,CACL,CAAC,EACL,CAAC,cACNH,KAAA,QAAKC,KAAK,CAAC,gBAAgB,CAAAE,QAAA,eACvBC,IAAA,OAAIH,KAAK,CAAC,kBAAkB,CAAAE,QAAA,cACxBC,IAAA,WAAQH,KAAK,CAAC,4BAA4B,CAACI,IAAI,CAAC,QAAQ,CAAC,iBAAe,UAAU,CAAC,iBAAe,cAAc,CAAC,gBAAc,OAAO,CAAC,gBAAc,aAAa,CAAAF,QAAA,CAAC,mBAGnK,CAAQ,CAAC,CACT,CAAC,cACLC,IAAA,QAAKF,EAAE,CAAC,aAAa,CAACD,KAAK,CAAC,6BAA6B,CAAC,iBAAe,mBAAmB,CAAAE,QAAA,cACxFC,IAAA,QAAKH,KAAK,CAAC,gBAAgB,CAAAE,QAAA,CAAC,stCAO5B,CAAK,CAAC,CACL,CAAC,EACL,CAAC,cACNH,KAAA,QAAKC,KAAK,CAAC,gBAAgB,CAAAE,QAAA,eACvBC,IAAA,OAAIH,KAAK,CAAC,kBAAkB,CAAAE,QAAA,cACxBC,IAAA,WAAQH,KAAK,CAAC,4BAA4B,CAACI,IAAI,CAAC,QAAQ,CAAC,iBAAe,UAAU,CAAC,iBAAe,gBAAgB,CAAC,gBAAc,OAAO,CAAC,gBAAc,eAAe,CAAAF,QAAA,CAAC,yBAGvK,CAAQ,CAAC,CACT,CAAC,cACLC,IAAA,QAAKF,EAAE,CAAC,eAAe,CAACD,KAAK,CAAC,6BAA6B,CAAC,iBAAe,mBAAmB,CAAAE,QAAA,cAC1FC,IAAA,QAAKH,KAAK,CAAC,gBAAgB,CAAAE,QAAA,CAAC,mlBAG5B,CAAK,CAAC,CACL,CAAC,EACL,CAAC,EACL,CAAC,CAEd"},"metadata":{},"sourceType":"module","externalDependencies":[]}