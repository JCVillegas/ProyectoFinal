{"ast":null,"code":"var _jsxFileName = \"/home/yodemente/proyectofinal/src/componentes/AcordeonC1.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AcordeonC1() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"accordion\",\n    id: \"accordionExample\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"accordion-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        class: \"accordion-header\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"accordion-button\",\n          type: \"button\",\n          \"data-bs-toggle\": \"collapse\",\n          \"data-bs-target\": \"#collapseOne\",\n          \"aria-expanded\": \"true\",\n          \"aria-controls\": \"collapseOne\",\n          children: \"Arquitectura de .NET\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 6,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 5,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"collapseOne\",\n        class: \"accordion-collapse collapse show\",\n        \"data-bs-parent\": \"#accordionExample\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"accordion-body\",\n          children: \"Los programas de C# se ejecutan en .NET, un sistema de ejecuci\\xF3n virtual denominado Common Language Runtime (CLR) y un conjunto de bibliotecas de clases. CLR es la implementaci\\xF3n de Microsoft del est\\xE1ndar internacional Common Language Infrastructure (CLI). CLI es la base para crear entornos de ejecuci\\xF3n y desarrollo en los que los lenguajes y las bibliotecas funcionan juntos sin problemas. El c\\xF3digo fuente escrito en C# se compila en un lenguaje intermedio (IL) que guarda conformidad con la especificaci\\xF3n de CLI. El c\\xF3digo y los recursos de IL, como los mapas de bits y las cadenas, se almacenan en un ensamblado, normalmente con una extensi\\xF3n .dll. Un ensamblado contiene un manifiesto que proporciona informaci\\xF3n sobre los tipos, la versi\\xF3n y la referencia cultural. Cuando se ejecuta el programa C#, el ensamblado se carga en CLR. CLR realiza la compilaci\\xF3n Just-In-Time (JIT) para convertir el c\\xF3digo IL en instrucciones de m\\xE1quina nativas. Adem\\xE1s, CLR proporciona otros servicios relacionados con la recolecci\\xF3n de elementos no utilizados, el control de excepciones y la administraci\\xF3n de recursos. El c\\xF3digo que se ejecuta en CLR a veces se conoce como \\\"c\\xF3digo administrado\\\". El \\\"c\\xF3digo no administrado\\\" se compila en un lenguaje nativo de la m\\xE1quina destinado a un sistema concreto.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"accordion-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        class: \"accordion-header\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"accordion-button collapsed\",\n          type: \"button\",\n          \"data-bs-toggle\": \"collapse\",\n          \"data-bs-target\": \"#collapseTwo\",\n          \"aria-expanded\": \"false\",\n          \"aria-controls\": \"collapseTwo\",\n          children: \"Tipos y variables\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"collapseTwo\",\n        class: \"accordion-collapse collapse\",\n        \"data-bs-parent\": \"#accordionExample\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"accordion-body\",\n          children: \"Un tipo define la estructura y el comportamiento de los datos en C#. La declaraci\\xF3n de un tipo puede incluir sus miembros, tipo base, interfaces que implementa y operaciones permitidas para ese tipo. Una variable es una etiqueta que hace referencia a una instancia de un tipo espec\\xEDfico. Hay dos clases de tipos en C#: tipos de valor y tipos de referencia. Las variables de tipos de valor contienen directamente sus datos. Las variables de tipos de referencia almacenan referencias a los datos, lo que se conoce como objetos. Con los tipos de referencia, es posible que dos variables hagan referencia al mismo objeto y que, por tanto, las operaciones en una variable afecten al objeto al que hace referencia la otra. Con los tipos de valor, cada variable tiene su propia copia de los datos y no es posible que las operaciones en una variable afecten a la otra (excepto para las variables de par\\xE1metro ref y out). Un identificador es un nombre de variable. Un identificador es una secuencia de caracteres Unicode sin ning\\xFAn espacio en blanco. Un identificador puede ser una palabra reservada de C# si tiene el prefijo @. El uso de una palabra reservada como identificador puede ser \\xFAtil al interactuar con otros lenguajes.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"accordion-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        class: \"accordion-header\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"accordion-button collapsed\",\n          type: \"button\",\n          \"data-bs-toggle\": \"collapse\",\n          \"data-bs-target\": \"#collapseThree\",\n          \"aria-expanded\": \"false\",\n          \"aria-controls\": \"collapseThree\",\n          children: \"Estructura del programa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"collapseThree\",\n        class: \"accordion-collapse collapse\",\n        \"data-bs-parent\": \"#accordionExample\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"accordion-body\",\n          children: \"Prototipos Los conceptos organizativos clave de C# son programas, espacios de nombres, tipos, miembros y ensamblados. Los programas declaran tipos, que contienen miembros y pueden organizarse en espacios de nombres. Las clases, estructuras e interfaces son ejemplos de tipos. Los campos, los m\\xE9todos, las propiedades y los eventos son ejemplos de miembros. Cuando se compilan programas de C#, se empaquetan f\\xEDsicamente en ensamblados. Normalmente, los ensamblados tienen las extensiones de archivo .exe o .dll, en funci\\xF3n de si implementan aplicaciones o bibliotecas, respectivamente.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 9\n  }, this);\n}\n_c = AcordeonC1;\nvar _c;\n$RefreshReg$(_c, \"AcordeonC1\");","map":{"version":3,"names":["AcordeonC1","_jsxDEV","class","id","children","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/yodemente/proyectofinal/src/componentes/AcordeonC1.jsx"],"sourcesContent":["export default function AcordeonC1() {\n    return (\n        <div class=\"accordion\" id=\"accordionExample\">\n            <div class=\"accordion-item\">\n                <h2 class=\"accordion-header\">\n                    <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                        Arquitectura de .NET\n                    </button>\n                </h2>\n                <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\n                    <div class=\"accordion-body\">\n                        Los programas de C# se ejecutan en .NET, un sistema de ejecución virtual denominado Common Language Runtime (CLR) y un conjunto de bibliotecas de clases. CLR es la implementación de Microsoft del estándar internacional Common Language Infrastructure (CLI). CLI es la base para crear entornos de ejecución y desarrollo en los que los lenguajes y las bibliotecas funcionan juntos sin problemas.\n\n                        El código fuente escrito en C# se compila en un lenguaje intermedio (IL) que guarda conformidad con la especificación de CLI. El código y los recursos de IL, como los mapas de bits y las cadenas, se almacenan en un ensamblado, normalmente con una extensión .dll. Un ensamblado contiene un manifiesto que proporciona información sobre los tipos, la versión y la referencia cultural.\n\n                        Cuando se ejecuta el programa C#, el ensamblado se carga en CLR. CLR realiza la compilación Just-In-Time (JIT) para convertir el código IL en instrucciones de máquina nativas. Además, CLR proporciona otros servicios relacionados con la recolección de elementos no utilizados, el control de excepciones y la administración de recursos. El código que se ejecuta en CLR a veces se conoce como \"código administrado\". El \"código no administrado\" se compila en un lenguaje nativo de la máquina destinado a un sistema concreto.\n                    </div>\n                </div>\n            </div>\n            <div class=\"accordion-item\">\n                <h2 class=\"accordion-header\">\n                    <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n\n                        Tipos y variables\n                    </button>\n                </h2>\n                <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                    <div class=\"accordion-body\">\n\n                        Un tipo define la estructura y el comportamiento de los datos en C#. La declaración de un tipo puede incluir sus miembros, tipo base, interfaces que implementa y operaciones permitidas para ese tipo. Una variable es una etiqueta que hace referencia a una instancia de un tipo específico.\n\n                        Hay dos clases de tipos en C#: tipos de valor y tipos de referencia. Las variables de tipos de valor contienen directamente sus datos. Las variables de tipos de referencia almacenan referencias a los datos, lo que se conoce como objetos. Con los tipos de referencia, es posible que dos variables hagan referencia al mismo objeto y que, por tanto, las operaciones en una variable afecten al objeto al que hace referencia la otra. Con los tipos de valor, cada variable tiene su propia copia de los datos y no es posible que las operaciones en una variable afecten a la otra (excepto para las variables de parámetro ref y out).\n\n                        Un identificador es un nombre de variable. Un identificador es una secuencia de caracteres Unicode sin ningún espacio en blanco. Un identificador puede ser una palabra reservada de C# si tiene el prefijo @. El uso de una palabra reservada como identificador puede ser útil al interactuar con otros lenguajes.\n                    </div>\n                </div>\n            </div>\n            <div class=\"accordion-item\">\n                <h2 class=\"accordion-header\">\n                    <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n\n                        Estructura del programa\n                    </button>\n                </h2>\n                <div id=\"collapseThree\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\n                    <div class=\"accordion-body\">\n                        Prototipos\n                        Los conceptos organizativos clave de C# son programas, espacios de nombres, tipos, miembros y ensamblados. Los programas declaran tipos, que contienen miembros y pueden organizarse en espacios de nombres. Las clases, estructuras e interfaces son ejemplos de tipos. Los campos, los métodos, las propiedades y los eventos son ejemplos de miembros. Cuando se compilan programas de C#, se empaquetan físicamente en ensamblados. Normalmente, los ensamblados tienen las extensiones de archivo .exe o .dll, en función de si implementan aplicaciones o bibliotecas, respectivamente.\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}